# A script that outputs a C++ wrapper for L3DT zeofuncs

import zeolite
import datetime
import os
import re
from string import Template

filename = 'zeofuncapi.c'

# substitute underscores for periods
def getFuncName(name):
    return re.sub('_', '.', name)
    
def typeToC(type):
    if (type == 'map'):
        return 'ZMAP'
    elif (type == 'string'):
        return 'const char *'
    elif (type == 'format'):
        return 'ZFORMAT'
    elif (type == 'varlist'):
        return 'ZLIST'
    elif (type == 'ZeoFunc'):
        return 'ZFUNC'
    elif (type == 'Climate'):
        return 'ZVAR' 
    elif (type == 'LandType'):
        return 'ZVAR' 
    elif (type == 'buffer'):
        return 'ZVAR'
    elif (type == 'colour'):
        return 'ZVAR'
    return type

def typeToConst(type):
    if (type == 'LPVOID' or type == 'void'):
        return 'VarID_void'
    return 'VarID_' + type

def processItem(file,item,prefix):
    if (prefix != ''):
        prefix = prefix + '_'
    typeId = item.GetTypeID()
    if (typeId == zeolite.VarID_varlist):
        varlist = zeolite.CzList()
        varlist.Attach(item.GetZVAR())
        # branch
        x = 0
        while x < varlist.nItems():
            subitem = zeolite.CzVar(varlist.GetItem(x))
            processItem(file,subitem,prefix + item.GetName())
            x = x + 1
            
    if (typeId == zeolite.VarID_ZeoFunc):
        typename = zeolite.CzStr()
        arglist = zeolite.CzList()
        func = zeolite.CzFunc()
        func.Attach(item.GetZVAR())
        zeolite.cvar.theAPI.type_GetTypeName(func.GetReturnTypeID(), typename.GetZVAR());
        func.GetArgListPrototype(arglist.GetZVAR())
        argi = 0
        # the method return type and method name
        type = typename.GetText()
        file.write(typeToC(type) + ' ' + prefix + func.GetName() + ' (')
        
        # the method arguments
        while argi < arglist.nItems():
            temp = zeolite.CzVar(arglist.GetItem(argi))
            temp.GetTypeName(typename.GetZVAR())
            # the argument type and name
            type = typename.GetText()
            file.write(typeToC(type) + ' ' + temp.GetName())
            argi = argi + 1
            if (argi != arglist.nItems()):
                file.write(', ')
        file.write (')\n')
        argcode = ''
        if (arglist.nItems() == 0):
            code = Template(
'''{
    static CzFunc $localname;
    
    if ($localname.GetZVAR() == NULL)
        $localname.GetFunc("$name");

    $localname.Execute();
}
''')
        else:
            code = Template(
'''{
    static CzFunc $localname;
    
    if ($localname.GetZVAR() == NULL)
        $localname.GetFunc("$name");

    CzList args;
    $createallargs
    $localname.Execute((ZLIST)args.GetZVAR());
}

''')
            argcode = '/* create all the args here */\n'
            argi = 0
            while argi < arglist.nItems():
                temp = zeolite.CzVar(arglist.GetItem(argi))
                temp.GetTypeName(typename.GetZVAR())
                # the argument type and name
                type = typename.GetText()
                createargt = Template(
'''
    CzVar var$argname (args.CreateItem($zeolitetype, "$argname"));
    var$argname.SetValue($zeolitetype, & $argname);
''')
                argcode = createargt.substitute(
                            zeolitetype=typeToConst(type),
                            argname=temp.GetName()
                            )
                argi = argi + 1
                
        codestr = code.substitute(
              localname='local'+func.GetName(),
              name=getFuncName(prefix + func.GetName()),
              createallargs=argcode
              )
        file.write(codestr)
    return

getfunclist = zeolite.CzFunc()
if (getfunclist.GetFunc('zeofunc.GetFuncList') == False):
    print 'GetFunc failed for GetFuncList - this is serious...'

funclist = zeolite.CzList()
funclist.Attach(getfunclist.Execute())

header =   [ '/* THIS FILE IS AUTOMATICALLY GENERATED */\n',
                '/*\n ' + str(os.path.basename(__file__)) + ' ' + str(datetime.datetime.now()) + '\n*/\n\n' ]
file = open (filename, 'w')
file.writelines(header)

# Recursively loop through all the zeofuncs
i = 0
while i < funclist.nItems():
    var = zeolite.CzVar(funclist.GetItem(i))
    processItem(file,var,'')
    i = i + 1

footer = '/* EOF */\n\n'
file.writelines(footer)

file.close()

print __file__ + ' is finished'